[{"/Users/shermam/Projects/secure-router/.eslintrc.js":"1","/Users/shermam/Projects/secure-router/src/index.js":"2","/Users/shermam/Projects/secure-router/src/test.js":"3"},{"size":181,"mtime":1682519215410,"results":"4","hashOfConfig":"5"},{"size":8455,"mtime":1682519570656,"results":"6","hashOfConfig":"5"},{"size":21389,"mtime":1682519473741,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11v03zy",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"17"},"/Users/shermam/Projects/secure-router/.eslintrc.js",[],[],"/Users/shermam/Projects/secure-router/src/index.js",["18","19","20","21","22","23","24"],["25"],"/Users/shermam/Projects/secure-router/src/test.js",["26","27","28","29","30"],["31","32","33"],"/* eslint-env goodeggs/server-side-test */\nimport Promise from 'bluebird';\nimport _ from 'lodash';\nimport assert from 'assert';\nimport express from 'express';\nimport request from 'request';\nimport {describe, it, afterEach} from 'mocha';\n\nimport Router from './index';\n\ndescribe('default behavior', function () {\n  it('denies requests to endpoints with no security middleware', function () {\n    const router = buildRouter();\n    router.get('/foo', (req, res) => res.send('you should never get here!'));\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(401));\n  });\n\n  it('denies requests to undefined endpoints', function () {\n    return withRunningServer(buildRouter()).then(() =>\n      expectRequest('GET', '/foo').toReturnCode(401),\n    );\n  });\n});\n\ndescribe('use()', function () {\n  it('allows nesting of secure routers with use()', function () {\n    const router = buildRouter();\n    const subRouter = new Router();\n    subRouter.secureEndpoint({\n      method: 'GET',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    router.use(subRouter);\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(200));\n  });\n\n  it('provides req.matchedRoutes to middlewares even when 404', function () {\n    const router = buildRouter();\n    const subRouter = new Router();\n    subRouter.secureSubpath({\n      path: '/nested',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n    });\n    router.use('/base/:baseId', subRouter);\n    router.use((req, res) => {\n      res.status(404);\n      res.json(req.matchedRoutes);\n    });\n    return withRunningServer(router).then(() =>\n      expectRequest('GET', '/base/2/nested/239847').toReturnBody(['/base/:baseId', '/nested']),\n    );\n  });\n});\n\ndescribe('secureEndpoint()', function () {\n  it('allows GET access to specific secure endpoints', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'GET',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router)\n      .then(() => expectRequest('GET', '/foo').toReturnCode(200))\n      .then(() => expectRequest('POST', '/foo').toReturnCode(401))\n      .then(() => expectRequest('GET', '/bar').toReturnCode(401));\n  });\n\n  it('allows POST access to specific secure endpoints', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'POST',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router)\n      .then(() => expectRequest('POST', '/foo').toReturnCode(200))\n      .then(() => expectRequest('GET', '/foo').toReturnCode(401))\n      .then(() => expectRequest('POST', '/bar').toReturnCode(401));\n  });\n\n  it('allows PUT access to specific secure endpoints', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'PUT',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router)\n      .then(() => expectRequest('PUT', '/foo').toReturnCode(200))\n      .then(() => expectRequest('GET', '/foo').toReturnCode(401))\n      .then(() => expectRequest('PUT', '/bar').toReturnCode(401));\n  });\n\n  it('allows DELETE access to specific secure endpoints', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'DELETE',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router)\n      .then(() => expectRequest('DELETE', '/foo').toReturnCode(200))\n      .then(() => expectRequest('GET', '/foo').toReturnCode(401))\n      .then(() => expectRequest('DELETE', '/bar').toReturnCode(401));\n  });\n\n  it('allows HEAD access to specific secure endpoints', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'HEAD',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router)\n      .then(() => expectRequest('HEAD', '/foo').toReturnCode(200))\n      .then(() => expectRequest('GET', '/foo').toReturnCode(401))\n      .then(() => expectRequest('HEAD', '/bar').toReturnCode(401));\n  });\n\n  it('allows requests with URL parameters', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'GET',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router).then(() =>\n      expectRequest('GET', '/foo?bar=baz').toReturnCode(200),\n    );\n  });\n\n  it('ignores bouncers on other paths that do not share a secureSubpath', function () {\n    const router = buildRouter();\n    const fooRouter = new Router();\n\n    router.use('/foo', fooRouter);\n    fooRouter.secureEndpoint({\n      method: 'POST',\n      path: '/',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    fooRouter.secureEndpoint({\n      method: 'POST',\n      path: '/:id',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.denyWith({statusCode: 403}))],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n\n    return withRunningServer(router)\n      .then(() => expectRequest('POST', '/foo').toReturnCode(200))\n      .then(() => expectRequest('POST', '/foo/123').toReturnCode(403));\n  });\n\n  it('provides req.matchedRoutes to middlewares', function () {\n    const router = buildRouter();\n    const subRouter = new Router();\n    subRouter.secureEndpoint({\n      method: 'GET',\n      path: '/nested/:nestedId',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => {\n        res.json(req.matchedRoutes);\n        res.sendStatus(200);\n      },\n    });\n    router.use('/base/:baseId', subRouter);\n    return withRunningServer(router).then(() =>\n      expectRequest('GET', '/base/2/nested/239847').toReturnBody([\n        '/base/:baseId',\n        '/nested/:nestedId',\n      ]),\n    );\n  });\n\n  // regression test, see https://github.com/expressjs/express/issues/2879#issuecomment-269433170\n  it('req.matchedRoutes is correct when error middlewares run', function () {\n    const router = buildRouter();\n    const subRouter = new Router();\n    subRouter.secureEndpoint({\n      method: 'GET',\n      path: '/nested/:nestedId',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res, next) => {\n        next(new Error('no.'));\n      },\n    });\n    router.use('/base/:baseId', subRouter);\n    router.use((err, req, res, next) => {\n      next(err);\n    });\n    // eslint-disable-next-line no-unused-vars, handle-callback-err\n    router.use((err, req, res, next) => {\n      res.json(req.matchedRoutes);\n      res.sendStatus(200);\n    });\n    return withRunningServer(router).then(() =>\n      expectRequest('GET', '/base/2/nested/239847').toReturnBody([\n        '/base/:baseId',\n        '/nested/:nestedId',\n      ]),\n    );\n  });\n});\n\ndescribe('secureSubpath()', function () {\n  it('allows access to sub-resources', function () {\n    const router = buildRouter();\n    router\n      .secureSubpath({\n        path: '/sub',\n        bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      })\n      .get('/foo', (req, res) => res.sendStatus(200));\n    return withRunningServer(router)\n      .then(() => expectRequest('GET', '/sub/foo').toReturnCode(200))\n      .then(() => expectRequest('GET', '/sub/bar').toReturnCode(404))\n      .then(() => expectRequest('GET', '/bar').toReturnCode(401));\n  });\n\n  it('allows access to sub-sub-resources when the security is defined at the upper layer', function () {\n    const router = buildRouter();\n    const subSubRouter = new Router();\n    subSubRouter.get('/foo', (req, res) => res.sendStatus(200));\n    router\n      .secureSubpath({\n        path: '/sub',\n        bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      })\n      .use('/subsub', subSubRouter);\n    return withRunningServer(router)\n      .then(() => expectRequest('GET', '/sub/subsub/foo').toReturnCode(200))\n      .then(() => expectRequest('GET', '/sub/foo').toReturnCode(404));\n  });\n\n  it('allows access to sub-sub-resources when the security is defined at the lower layer', function () {\n    const router = buildRouter();\n    const subRouter = new Router();\n    subRouter\n      .secureSubpath({\n        path: '/subsub',\n        bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      })\n      .get('/foo', (req, res) => res.sendStatus(200));\n    router.use('/sub', subRouter);\n    return withRunningServer(router)\n      .then(() => expectRequest('GET', '/sub/subsub/foo').toReturnCode(200))\n      .then(() => expectRequest('GET', '/sub/foo').toReturnCode(401));\n  });\n\n  it('provides req.matchedRoutes to middlewares', function () {\n    const router = buildRouter();\n    const subRouter = new Router();\n    subRouter\n      .secureSubpath({\n        path: '/nested',\n        bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      })\n      .get('/:nestedId', (req, res) => {\n        res.json(req.matchedRoutes);\n        res.sendStatus(200);\n      });\n    router.use('/base/:baseId', subRouter);\n    return withRunningServer(router).then(() =>\n      expectRequest('GET', '/base/2/nested/239847').toReturnBody([\n        '/base/:baseId',\n        '/nested',\n        '/:nestedId',\n      ]),\n    );\n  });\n\n  // regression test, see https://github.com/expressjs/express/issues/2879#issuecomment-269433170\n  it('req.matchedRoutes is correct when error middlewares run', function () {\n    const router = buildRouter();\n    const subRouter = new Router();\n    subRouter\n      .secureSubpath({\n        path: '/nested',\n        bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      })\n      .get('/:nestedId', (req, res, next) => {\n        next(new Error('no.'));\n      });\n    router.use('/base/:baseId', subRouter);\n    router.use((err, req, res, next) => {\n      next(err);\n    });\n    // eslint-disable-next-line no-unused-vars, handle-callback-err\n    router.use((err, req, res, next) => {\n      res.json(req.matchedRoutes);\n      res.sendStatus(200);\n    });\n    return withRunningServer(router).then(() =>\n      expectRequest('GET', '/base/2/nested/239847').toReturnBody([\n        '/base/:baseId',\n        '/nested',\n        '/:nestedId',\n      ]),\n    );\n  });\n\n  it('req.matchedRoutes never includes a trailing slash', function () {\n    const router = buildRouter();\n    const subRouter = new Router();\n    subRouter\n      .secureSubpath({\n        path: '/foo',\n        bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      })\n      .get('/', (req, res, next) => {\n        next(new Error('no.'));\n      });\n    subRouter\n      .secureSubpath({\n        path: '/',\n        bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE)],\n      })\n      .get('/bar', (req, res, next) => {\n        next(new Error('no.'));\n      });\n    router.use('/base', subRouter);\n    router.use((err, req, res, next) => {\n      next(err);\n    });\n    // eslint-disable-next-line no-unused-vars, handle-callback-err\n    router.use((err, req, res, next) => {\n      res.json(req.matchedRoutes);\n      res.sendStatus(200);\n    });\n    return withRunningServer(router).then(() =>\n      Promise.all([\n        expectRequest('GET', '/base/foo').toReturnBody(['/base', '/foo']),\n        expectRequest('GET', '/base/foo/').toReturnBody(['/base', '/foo']),\n        expectRequest('GET', '/base/bar').toReturnBody(['/base', '/bar']),\n        expectRequest('GET', '/base/bar/').toReturnBody(['/base', '/bar']),\n      ]),\n    );\n  });\n});\n\ndescribe('bouncer()', function () {\n  it('allows you to arbitrarily add bouncers to routers', function () {\n    const router = buildRouter();\n    router.bouncer(_.constant(Router.AUTHENTICATE));\n    router.bouncer(_.constant(Router.AUTHORIZE));\n    router.get('/foo', (req, res) => res.sendStatus(200));\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(200));\n  });\n});\n\ndescribe('allowing and denying', function () {\n  it('does not allow access to a resource if no security middleware explicitly allows', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'GET',\n      path: '/foo',\n      bouncers: [_.constant(), _.constant()],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(401));\n  });\n\n  it('does not allow access to a resource if some security middleware authenticates, some authorizes, and one denies', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'GET',\n      path: '/foo',\n      bouncers: [\n        _.constant(Router.AUTHENTICATE),\n        _.constant(Router.AUTHORIZE),\n        _.constant(Router.DENY),\n      ],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(401));\n  });\n\n  it('does allow access to a resource if some security middleware authenticates, some authorizes, and none denies', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'GET',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant(Router.AUTHORIZE), _.constant()],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(200));\n  });\n\n  it('does not allow access to a resource if the middleware does not authenticate (even if it authorizes)', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'GET',\n      path: '/foo',\n      bouncers: [_.constant(), _.constant(Router.AUTHORIZE)],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(401));\n  });\n\n  it('does not allow access to a resource (returns a 403) if the middleware authenticates but does not authorize', function () {\n    const router = buildRouter();\n    router.secureEndpoint({\n      method: 'GET',\n      path: '/foo',\n      bouncers: [_.constant(Router.AUTHENTICATE), _.constant()],\n      middleware: (req, res) => res.sendStatus(200),\n    });\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(403));\n  });\n});\n\ndescribe('bouncer arguments', function () {\n  it('provides req object as the first argument to the bouncer function', function () {\n    const router = buildRouter();\n    let url;\n    router.bouncer(function (req) {\n      url = req.url;\n      return Router.AUTHENTICATE;\n    });\n    router.bouncer(_.constant(Router.AUTHORIZE));\n    return withRunningServer(router)\n      .then(() => expectRequest('GET', '/foo').toReturnCode(404))\n      .then(function () {\n        assert(url.match(/\\/foo/));\n      });\n  });\n\n  it('provides res object as the second argument to the bouncer function', function () {\n    const router = buildRouter();\n    router.bouncer(function (req, res) {\n      res.set('x-foo', 'bar');\n      return Router.AUTHENTICATE;\n    });\n    router.bouncer(_.constant(Router.AUTHORIZE));\n    return withRunningServer(router).then(() =>\n      expectRequest('GET', '/foo').toHaveHeader('x-foo', 'bar'),\n    );\n  });\n});\n\ndescribe('custom denials with Router.denyWith()', function () {\n  it('can run arbitrary middleware instead of responding', function () {\n    const router = buildRouter();\n    router.bouncer(function () {\n      return Router.denyWith(function (req, res) {\n        res.send(408);\n      });\n    });\n    return withRunningServer(router).then(function () {\n      return expectRequest('GET', '/foo').toReturnCode(408);\n    });\n  });\n\n  it('can provide custom status codes', function () {\n    const router = buildRouter();\n    router.bouncer(function () {\n      return Router.denyWith({statusCode: 404});\n    });\n    return withRunningServer(router).then(() => expectRequest('GET', '/foo').toReturnCode(404));\n  });\n\n  it('can provide a custom response payload as a string', function () {\n    const router = buildRouter();\n    router.bouncer(function () {\n      return Router.denyWith({payload: 'Nope, sorry, not today!'});\n    });\n    return withRunningServer(router).then(function () {\n      return Promise.all([\n        expectRequest('GET', '/foo').toReturnCode(401),\n        expectRequest('GET', '/foo').toReturnBody('Nope, sorry, not today!'),\n      ]);\n    });\n  });\n\n  it('can provide a custom response payload as an object', function () {\n    const router = buildRouter();\n    router.bouncer(function () {\n      return Router.denyWith({payload: {error: true, ms: 10239}});\n    });\n    return withRunningServer(router).then(function () {\n      return Promise.all([\n        expectRequest('GET', '/foo').toReturnCode(401),\n        expectRequest('GET', '/foo').toReturnBody({error: true, ms: 10239}),\n      ]);\n    });\n  });\n\n  it('applies denials in tree order (root first)', function () {\n    /*\n     * set up the following structure:\n     *    / (bouncer1, bouncer2)\n     *      /foo (bouncer3)\n     *        /bar (bouncer4)\n     */\n    const router = buildRouter();\n    const subRouter = new Router();\n    const middlewareCalls = [];\n    router.bouncer(function () {\n      return Router.denyWith(function (req, res, next) {\n        middlewareCalls.push(1);\n        next();\n      });\n    });\n    router.use('/foo', subRouter);\n    subRouter.secureEndpoint({\n      method: 'GET',\n      path: '/bar',\n      bouncer() {\n        return Router.denyWith(function (req, res) {\n          middlewareCalls.push(4);\n          res.sendStatus(400);\n        });\n      },\n      middleware: (req, res) => res.send(501),\n    });\n    router.bouncer(function () {\n      return Router.denyWith(function (req, res, next) {\n        middlewareCalls.push(2);\n        next();\n      });\n    });\n    subRouter.bouncer(function () {\n      return Router.denyWith(function (req, res, next) {\n        middlewareCalls.push(3);\n        next();\n      }, 3);\n    });\n    return withRunningServer(router).then(function () {\n      return expectRequest('GET', '/foo/bar')\n        .toReturnCode(400)\n        .then(function () {\n          assert.deepEqual(middlewareCalls, [1, 2, 3, 4]);\n        });\n    });\n  });\n\n  it('returns a 500 for an invalid bouncer (e.g. secure-router@2.1.1. Router.DENY)', function () {\n    const router = buildRouter();\n\n    router.bouncer(function () {\n      // secure-router@2.1.1 returns this kind of bouncer if you use `Router.denyWith`\n      return Promise.resolve({value: 'DENY', statusCode: 401});\n    });\n\n    router.secureEndpoint({\n      method: 'GET',\n      path: '/bar',\n      middleware: (req, res) => res.send(200),\n    });\n\n    return withRunningServer(router).then(function () {\n      return expectRequest('GET', '/bar').toReturnCode(500);\n    });\n  });\n});\n\nfunction expectRequest(method, path) {\n  const reqPromise = Promise.fromCallback(function (cb) {\n    request(\n      {\n        method,\n        json: true,\n        url: `http://localhost:19288${path}`,\n      },\n      cb,\n    );\n  });\n\n  return {\n    toReturnCode(responseCode) {\n      return reqPromise.then(function (response) {\n        assert.equal(\n          response.statusCode,\n          responseCode,\n          `Expected request to ${path} to return code ${responseCode} but got ${response.statusCode}.`,\n        );\n      });\n    },\n    toHaveHeader(name, value) {\n      return reqPromise.then(function (response) {\n        assert.equal(\n          response.headers[name],\n          value,\n          `Expected request to ${path} to respond with header ${name} of value ${value}, but got ${response.headers[name]} instead.`,\n        );\n      });\n    },\n    toReturnBody(body) {\n      return reqPromise.then(function (response) {\n        assert.deepEqual(\n          response.body,\n          body,\n          `Expected request to ${path} to return body ${JSON.stringify(\n            body,\n          )}, but got ${JSON.stringify(response.body)} instead.`,\n        );\n      });\n    },\n  };\n}\n\nfunction buildRouter() {\n  const router = new Router();\n  router.bounceRequests();\n  return router;\n}\n\nlet sharedServer;\nfunction withRunningServer(router) {\n  const app = express();\n  app.use(router);\n  return Promise.fromCallback(function (done) {\n    sharedServer = app.listen(19288, done);\n  });\n}\nafterEach('stop server', function (done) {\n  if (sharedServer) {\n    return sharedServer.close(function () {\n      sharedServer = null;\n      done();\n    });\n  }\n  return process.nextTick(done);\n});\n",{"ruleId":"34","severity":2,"message":"35","line":61,"column":32,"nodeType":"36","endLine":61,"endColumn":44},{"ruleId":"37","severity":2,"message":"38","line":95,"column":9,"nodeType":"39","messageId":"40","endLine":95,"endColumn":35,"fix":"41"},{"ruleId":"37","severity":2,"message":"38","line":115,"column":9,"nodeType":"39","messageId":"40","endLine":115,"endColumn":35,"fix":"42"},{"ruleId":"37","severity":2,"message":"38","line":119,"column":9,"nodeType":"39","messageId":"40","endLine":119,"endColumn":39,"fix":"43"},{"ruleId":"44","severity":2,"message":"45","line":159,"column":42,"nodeType":"46","messageId":"47","endLine":159,"endColumn":51},{"ruleId":"44","severity":2,"message":"45","line":189,"column":60,"nodeType":"46","messageId":"47","endLine":189,"endColumn":69},{"ruleId":"48","severity":2,"message":"49","line":260,"column":1,"nodeType":"50","endLine":260,"endColumn":15},{"ruleId":"51","severity":2,"message":"52","line":174,"column":3,"nodeType":"46","messageId":"53","endLine":174,"endColumn":17,"suppressions":"54"},{"ruleId":"55","severity":2,"message":"56","line":1,"column":0,"nodeType":null,"endLine":1,"endColumn":43},{"ruleId":"57","severity":2,"message":"58","line":9,"column":20,"nodeType":"36","endLine":9,"endColumn":29,"fix":"59"},{"ruleId":null,"message":"60","line":201,"column":5,"severity":2,"nodeType":null,"fix":"61"},{"ruleId":null,"message":"60","line":298,"column":5,"severity":2,"nodeType":null,"fix":"62"},{"ruleId":null,"message":"60","line":335,"column":5,"severity":2,"nodeType":null,"fix":"63"},{"ruleId":"64","severity":2,"message":"65","line":202,"column":32,"nodeType":"46","messageId":"66","endLine":202,"endColumn":36,"suppressions":"67"},{"ruleId":"64","severity":2,"message":"65","line":299,"column":32,"nodeType":"46","messageId":"66","endLine":299,"endColumn":36,"suppressions":"68"},{"ruleId":"64","severity":2,"message":"65","line":336,"column":32,"nodeType":"46","messageId":"66","endLine":336,"endColumn":36,"suppressions":"69"},"lodash/prop-shorthand","Do not use property shorthand syntax","Literal","prefer-destructuring","Use object destructuring.","VariableDeclarator","preferDestructuring",{"range":"70","text":"71"},{"range":"72","text":"71"},{"range":"73","text":"74"},"prefer-rest-params","Use the rest parameters instead of 'arguments'.","Identifier","preferRestParams","import/no-commonjs","Expected \"export\" or \"export default\"","MemberExpression","camelcase","Identifier 'process_params' is not in camel case.","notCamelCase",["75"],"eslint-comments/no-use","Unexpected ESLint directive comment.","import/no-useless-path-segments","Useless path segments for \"./index\", should be \".\"",{"range":"76","text":"77"},"Unused eslint-disable directive (no problems were reported from 'handle-callback-err').",{"range":"78","text":"79"},{"range":"80","text":"79"},{"range":"81","text":"79"},"no-unused-vars","'next' is defined but never used. Allowed unused args must match /^_/u.","unusedVar",["82"],["83"],["84"],[2943,2969],"{bouncers} = params",[3559,3585],[3707,3737],"{middleware} = params",{"kind":"85","justification":"79"},[257,266],"\".\"",[7312,7333],"",[10757,10778],[11849,11870],{"kind":"85","justification":"79"},{"kind":"85","justification":"79"},{"kind":"85","justification":"79"},"directive"]